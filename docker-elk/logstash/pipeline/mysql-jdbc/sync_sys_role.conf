input {
    jdbc {
      jdbc_connection_string => "jdbc:mysql://127.0.0.1:3306/demo?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=Asia/Shanghai"
      jdbc_user => "root"
      jdbc_password => "Password-2020"

      jdbc_driver_library => "/usr/share/logstash/lib/mysql-connector-java-8.0.15.jar"
      jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
      jdbc_default_timezone =>"Asia/Shanghai"

      # 设置监听间隔 各字段含义（分、时、天、月、年），默认"* * * * *"含义为每分钟更新一次，其他设置"*/10 * * * * *" 每10秒更新一次
      schedule => "*/10 * * * * *"

      record_last_run => "true"

      # 是否需要记录某个column 的值,如果record_last_run为真,可以自定义我们需要 track 的 column 名称，此时该参数就要为 true. 否则默认 track 的是 timestamp 的值.
      use_column_value => "true"

      # 如果 use_column_value 为真,需配置此参数. track 的数据库 column 名,该 column 必须是递增的. 一般是mysql主键
      tracking_column => "id"

      tracking_column_type => "timestamp"
      tracking_column => "update_time"
      use_column_value => true

      jdbc_paging_enabled => "true"
      jdbc_page_size => "1000"

      # sql语句执行文件，也可直接使用 statement => "select * from iot_raise_dust_params"
      statement_filepath => "/usr/share/logstash/pipeline/mysql-jdbc/sql/iot_raise_dust_params.sql"
    }
}

filter{
    
    #添加创建时间
    mutate {
      add_field => {"time_stamp" => "%{create_time}"}
    }

    #设置创建时间格式及时区
    date {
      match => ["time_stamp","ISO8601"]
      target => "@timestamp"
      timezone => "Asia/Shanghai"
      remove_field => ["time_stamp"]
    }

}

output {

    elasticsearch {
        hosts => ["localhost:9200"]
        user => "elastic"
        password => "Password-2020"
        index => "sys-lifter-%{+YYYY-MM-dd}"
        document_id => "%{id}"
    }

 #   stdout {
 #       codec => json_lines
 #   }

}