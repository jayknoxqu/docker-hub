# proxy_cache_path 缓存文件路径 需要手动建文件夹 mkdir /etc/nginx/cache
# levels 设置缓存文件目录层次；levels=1:2 表示两级目录
# keys_zone 设置缓存名字和共享内存大小
# inactive 在指定时间内没人访问则被删除 30m/分钟
# inactive 未被访问文件在缓存中保留时间，如果设为30m,则30分钟未被访问则不论状态是否为expired，缓存控制程序会删掉文件。inactive默认是10分钟。需要注意的是，inactive和expired配置项的含义是不同的，expired只是缓存过期，但不会被删除，inactive是删除指定时间内未被访问的缓存文件 30m/分钟 7d/7天
# max_size 最大缓存空间，如果缓存空间满，默认覆盖掉缓存时间最长的资源。
proxy_cache_path /etc/nginx/cache levels=1:2 keys_zone=img_cache:10m inactive=1d max_size=50G;

server {
   listen 80;
   server_name _;
   return 404;
}


#配置请求转发
server{
        listen  80;
        server_name img1.diyhi.com;
        location /{
        	# 跨域
		    if ($request_method = OPTIONS ) {
		      #测试时参数值可以用星号代表任意域名，生产环境请填写具体域名
		      #add_header "Access-Control-Allow-Origin"  *;
		      add_header "Access-Control-Allow-Origin"  "http://bbs.diyhi.com";
		      add_header "Access-Control-Allow-Methods" "GET, POST, PUT, OPTIONS, HEAD";
		      add_header "Access-Control-Allow-Headers" "*";
		      return 200;
		    }
		    #测试时参数值可以用星号代表任意域名，生产环境请填写具体域名
		    #add_header "Access-Control-Allow-Origin"  *;
		    add_header "Access-Control-Allow-Origin"  "http://bbs.diyhi.com";
		    add_header "Access-Control-Allow-Methods" "GET, POST, PUT, OPTIONS, HEAD";
		    add_header "Access-Control-Allow-Headers" "*";


        	proxy_set_header Host $host;
        	proxy_set_header X-Real-Ip $remote_addr;
        	proxy_set_header X-Forwarded-For $remote_addr;
        	proxy_pass http://172.26.188.173:8333;
        	client_max_body_size 100M; #允许上传文件大小,默认是1M

		}



		location ~ /(file/topic|file/help)/.*\.(m3u8|ts|mp4|avi|mkv|wmv|wav|rm|rmvb|mp3|flac|ape|zip|rar|7z|txt|docx|doc|pptx|ppt|xlsx|xls)$ {
			#只在非DELETE请求时处理
		    if ($request_method ~ ^(GET|POST|HEAD|OPTIONS|PUT|TRACE|CONNECT)$ ) {
				#返回302,让下一步执行内部跳转
				return 302;
				error_page 302 = @process_secure_link;
			}
			proxy_set_header Host $host;
        	proxy_set_header X-Real-Ip $remote_addr;
        	proxy_set_header X-Forwarded-For $remote_addr;
			proxy_pass http://172.26.188.173:8333;

		}

		location @process_secure_link {
				secure_link $arg_md5,$arg_expires;
			    #表示 MD5(密钥 + 不包含主机名和请求参数的剩余部分文件路径 + 过期时间) 1234567890123456是密钥，必须是16位字符并且和管理后台的'基本设置'中'文件防盗链密钥'一致
				secure_link_md5 1234567890123456$uri$arg_expires;


			    #当匹配成功的时候 secure_link 是非空非0的

			    # 没有匹配到返回 ""
			    if ($secure_link = "") {
			        return 403;
			    }

			    # 没有匹配到返回0
			    if ($secure_link = "0") {
			        return 410;
			    }
			   	#文件名重命名
			    if ($arg_filename != "") {
			        add_header Content-Disposition 'attachment; filename="$arg_filename"';
			    }

			   	#不设置跨域无法播放ts视频切片
			   	add_header "Access-Control-Allow-Origin"  "http://bbs.diyhi.com";
				add_header "Access-Control-Allow-Methods" "GET, HEAD";
				add_header "Access-Control-Allow-Headers" "*";

			     				proxy_set_header Host $host;
			                	proxy_set_header X-Real-Ip $remote_addr;
			                	proxy_set_header X-Forwarded-For $remote_addr;
				#proxy_redirect off;

				proxy_pass http://172.26.188.173:8333;
		}




		location ~ /(file/topic)/.*\.(jpg|jpeg|gif|png|bmp)$ {
		    proxy_set_header Host $host;
		    proxy_set_header X-Real-Ip $remote_addr;
		    proxy_set_header X-Forwarded-For $remote_addr;
		    proxy_pass http://172.26.188.173:8333;
		    client_max_body_size 100M; #允许上传文件大小,默认是1M

		    #只在GET请求时处理图片
			if ($request_method = GET) {
					#返回302,让下一步执行内部跳转
			    return 302;
			    error_page 302 = @process_image_filter;
			}
	}


	#Nginx 不支持在 if {} 这个 block 里面用 image_filter 函数，image_filter 的第一个参数 resize/crop 也不能用变量的方式传输

	# ~ 为区分大小写匹配 ~* 为不区分大小写匹配
	#location ~ .*.(gif|jpg|jpeg|png|bmp)$ {
	#location ~ /(file/topic)/.*\.(jpg|jpeg|gif|png|bmp)$ {
	location @process_image_filter {
		proxy_pass http://172.26.188.173:8333;
		#标记条件 nginx的配置中不支持if条件的逻辑与&& 逻辑或|| 运算 ，而且不支持if的嵌套语法
		set $flag 0;
		#将参数赋值给宽
		set $width $arg_width;

		#是否为原图
		set $originalImage 0;

		if ($width != ''){
			 set $flag "${flag}1";
		}
		#预设宽度为240或400，当输入其它宽度时默认改为240
		if ($arg_width !~ ^(240|400)$){
			 set $flag "${flag}1";
		}
		#如果URL带宽度参数并且不属于预先指定尺寸,则默认显示宽240
		if ($flag = "011"){
			 set $width '240';
		}


		#当请求的是原图时（即不带参数），则设置宽高维度为”-”
		if ( $width = '' ) {
			set $width '-';
		}

		#如果访问原图
		if ( $width = '-' ) {
			set $originalImage 1;
		}

		#原图不缓存
		proxy_no_cache $originalImage;

		#默认使用的key就是URL
		proxy_cache_key $host$uri$width;


 		# 将缩略图缓存在服务，避免每次请求都重新生成
		proxy_cache img_cache;
		# 有效的文件，在服务器缓存 1 天
		proxy_cache_valid 200 1d;
		#默认值：proxy_cache_lock off;
		#可配置段：http, server, location
		#作用：默认不开启，开启的话则每次只能有一个请求更新相同的缓存，其他请求要么等待缓存>有数据要么限时等待锁释放。通常在多个客户端请求缓存未命中时，只有第一个请求可以发向原服务器，其他请求要等待第一个响应返回或者超时后，使用缓存响应客户端。该参数可以合并回源请求，减轻峰值流量下的压力。
		proxy_cache_lock on;
		#默认值：proxy_cache_lock_timeout 5s;
		#可配置段：http, server, location
		#作用：等待缓存锁超时之后将直接请求后端，结果不会被缓存。
		proxy_cache_lock_timeout 5s;
		#当缓存过期后，如果开启了 proxy_cache_revalidate，则会发出一次 if-modified-since 或 if-none-match 条件请求，如果后端返回 304，则此时$upstream_cache_status 为 REVALIDATED，我们将得到两个好处，节省带宽和减少写磁盘的次数。
		proxy_cache_revalidate on;

		#标记缓存是否命中,在访问文件头Response Headers中查看
		# MISS 未命中，请求被传送到后端
		# HIT 缓存命中
		# EXPIRED 缓存已经过期请求被传送到后端
		# UPDATING 正在更新缓存，将使用旧的应答
		# STALE 后端将得到过期的应答
		add_header  Nginx-Cache "$upstream_cache_status";


		#按比例减少图像到指定大小，公减少一个可以另一个用"-"来表示,出错415，参数值可包含变量，可以与rotate一起使用，则两个一起生效。
		image_filter resize $width -;
		#设置读取图像缓冲的最大大小，超过则415错误。
		image_filter_buffer 100M;
		#设置变换的JPEG图像的期望质量。可接受的值是从1到100的范围内。较小的值通常意味着既降低图像质量，减少传输数据，推荐的最大值为95。参数值可以包含变量。
		image_filter_jpeg_quality 90;
		#定义是否应该透明转换的GIF图像或PNG图像与调色板中指定的颜色时，可以保留。透明度的损失将导致更好的图像质量。在PNG的Alpha通道总是保留透明度。
	  	image_filter_transparency on;

	}

}